//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
using System;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "VisorDatosDSL.VisorDatosDSLDiagram")]

namespace VisorDatosDSL
{
    /// <summary>
    /// DomainClass VisorDatosDSLDiagram
    /// Description for VisorDatosDSL.VisorDatosDSLDiagram
    /// </summary>
    [DslDesign::DisplayNameResource("VisorDatosDSL.VisorDatosDSLDiagram.DisplayName", typeof(global::VisorDatosDSL.VisorDatosDSLDomainModel), "VisorDatosDSL.GeneratedCode.DomainModelResx")]
    [DslDesign::DescriptionResource("VisorDatosDSL.VisorDatosDSLDiagram.Description", typeof(global::VisorDatosDSL.VisorDatosDSLDomainModel), "VisorDatosDSL.GeneratedCode.DomainModelResx")]
    [DslModeling::DomainModelOwner(typeof(global::VisorDatosDSL.VisorDatosDSLDomainModel))]
    [global::System.CLSCompliant(true)]
    [DslModeling::DomainObjectId("a17461e7-715e-42c4-a1cb-0dce2cb7ffcc")]
    public partial class VisorDatosDSLDiagram : DslDiagrams::Diagram
    {
        #region Diagram boilerplate
        private static DslDiagrams::StyleSet classStyleSet;
        private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
        /// <summary>
        /// Per-class style set for this shape.
        /// </summary>
        protected override DslDiagrams::StyleSet ClassStyleSet
        {
            get
            {
                if (classStyleSet == null)
                {
                    classStyleSet = CreateClassStyleSet();
                }
                return classStyleSet;
            }
        }

        /// <summary>
        /// Per-class ShapeFields for this shape
        /// </summary>
        public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
        {
            get
            {
                if (shapeFields == null)
                {
                    shapeFields = CreateShapeFields();
                }
                return shapeFields;
            }
        }
        #endregion
        #region Toolbox filters
        private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
                    new global::System.ComponentModel.ToolboxItemFilterAttribute(global::VisorDatosDSL.VisorDatosDSLToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };

        /// <summary>
        /// Toolbox item filter attributes for this diagram.
        /// </summary>
        public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
        {
            get
            {
                return toolboxFilters;
            }
        }
        #endregion
        #region Auto-placement
        /// <summary>
        /// Indicate that child shapes should added through view fixup should be placed automatically.
        /// </summary>
        public override bool ShouldAutoPlaceChildShapes
        {
            get
            {
                return true;
            }
        }
        #endregion
        #region Shape mapping
        /// <summary>
        /// Called during view fixup to ask the parent whether a shape should be created for the given child element.
        /// </summary>
        /// <remarks>
        /// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
        /// </remarks>
        protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
        {
            return true;
        }

        /// <summary>
        /// Called during view fixup to configure the given child element, after it has been created.
        /// </summary>
        /// <remarks>
        /// Custom code for choosing the shapes attached to either end of a connector is called from here.
        /// </remarks>
        protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
        {
            DslDiagrams::NodeShape sourceShape;
            DslDiagrams::NodeShape targetShape;
            DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
            if (connector == null)
            {
                base.OnChildConfiguring(child, createdDuringViewFixup);
                return;
            }
            this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);

            global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
            connector.Connect(sourceShape, targetShape);
        }

        /// <summary>
        /// helper method to find the shapes for either end of a connector, including calling the user's custom code
        /// </summary>
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
        {
            sourceShape = null;
            targetShape = null;

            if (sourceShape == null || targetShape == null)
            {
                DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
                if (sourceShape == null)
                {
                    sourceShape = endShapes[0];
                }
                if (targetShape == null)
                {
                    targetShape = endShapes[1];
                }
            }
        }

        /// <summary>
        /// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
        /// </summary>
        private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
        {
            DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
            DslDiagrams::NodeShape sourceShape = null, targetShape = null;
            if (link != null)
            {
                global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
                if (linkedElements.Count == 2)
                {
                    DslDiagrams::Diagram currentDiagram = this.Diagram;
                    DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
                    foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
                    {
                        DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
                        if (shape != null && shape.Diagram == currentDiagram)
                        {
                            sourceShape = shape;
                            break;
                        }
                    }

                    presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
                    foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
                    {
                        DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
                        if (shape != null && shape.Diagram == currentDiagram)
                        {
                            targetShape = shape;
                            break;
                        }
                    }

                }
            }

            return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
        }

        /// <summary>
        /// Creates a new shape for the given model element as part of view fixup
        /// </summary>
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
        protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
        {
            if (element is global::VisorDatosDSL.FuenteDeDatosPrimaria)
            {
                // Method:
                // private DslDiagrams::NodeShape CreateShapeForFuenteDeDatosPrimaria(FuenteDeDatosPrimaria newElement)
                // {
                // }
                // must be implemented in a partial class of VisorDatosDSLDiagram.  Given an instance of FuenteDeDatosPrimaria,
                // the method should return a new shape or connector instance that should be associated with this element.  If no shape or connector should be created, the method should return null.
                DslDiagrams::NodeShape newShape = CreateShapeForFuenteDeDatosPrimaria((global::VisorDatosDSL.FuenteDeDatosPrimaria)element);
                if (newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
                return newShape;
            }
            if (element is global::VisorDatosDSL.TipoFormatoSalidaWeb)
            {
                // Method:
                // private DslDiagrams::NodeShape CreateShapeForTipoFormatoSalidaWeb(TipoFormatoSalidaWeb newElement)
                // {
                // }
                // must be implemented in a partial class of VisorDatosDSLDiagram.  Given an instance of TipoFormatoSalidaWeb,
                // the method should return a new shape or connector instance that should be associated with this element.  If no shape or connector should be created, the method should return null.
                DslDiagrams::NodeShape newShape = CreateShapeForTipoFormatoSalidaWeb((global::VisorDatosDSL.TipoFormatoSalidaWeb)element);
                if (newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
                return newShape;
            }
            if (element is global::VisorDatosDSL.TipoDeChart)
            {
                global::VisorDatosDSL.TipoDeChartShape newShape = new global::VisorDatosDSL.TipoDeChartShape(this.Partition);
                if (newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
                return newShape;
            }
            if (element is global::VisorDatosDSL.WebService)
            {
                // Method:
                // private DslDiagrams::NodeShape CreateShapeForWebService(WebService newElement)
                // {
                // }
                // must be implemented in a partial class of VisorDatosDSLDiagram.  Given an instance of WebService,
                // the method should return a new shape or connector instance that should be associated with this element.  If no shape or connector should be created, the method should return null.
                DslDiagrams::NodeShape newShape = CreateShapeForWebService((global::VisorDatosDSL.WebService)element);
                if (newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
                return newShape;
            }
            if (element is global::VisorDatosDSL.BaseDatos)
            {
                // Method:
                // private DslDiagrams::NodeShape CreateShapeForBaseDatos(BaseDatos newElement)
                // {
                // }
                // must be implemented in a partial class of VisorDatosDSLDiagram.  Given an instance of BaseDatos,
                // the method should return a new shape or connector instance that should be associated with this element.  If no shape or connector should be created, the method should return null.
                DslDiagrams::NodeShape newShape = CreateShapeForBaseDatos((global::VisorDatosDSL.BaseDatos)element);
                if (newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
                return newShape;
            }
            if (element is global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesFormatosDeSalida)
            {
                global::VisorDatosDSL.ConectorFuente_FormatoSalida newShape = new global::VisorDatosDSL.ConectorFuente_FormatoSalida(this.Partition);
                return newShape;
            }
            if (element is global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesTiposDeChart)
            {
                global::VisorDatosDSL.ConectorFuente_TipoChart newShape = new global::VisorDatosDSL.ConectorFuente_TipoChart(this.Partition);
                return newShape;
            }
            if (element is global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesWebService)
            {
                global::VisorDatosDSL.ConectorFuente_WebService newShape = new global::VisorDatosDSL.ConectorFuente_WebService(this.Partition);
                return newShape;
            }
            if (element is global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesBaseDatos)
            {
                global::VisorDatosDSL.ConectorFuente_BaseDatos newShape = new global::VisorDatosDSL.ConectorFuente_BaseDatos(this.Partition);
                return newShape;
            }
            return base.CreateChildShape(element);
        }

        private DslDiagrams.NodeShape CreateShapeForBaseDatos(BaseDatos element)
        {
            BaseDatosShape newShape = new BaseDatosShape(this.Partition);
            if (newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
            return newShape;
        }

        private DslDiagrams.NodeShape CreateShapeForWebService(WebService element)
        {
            WebServiceShape newShape = new WebServiceShape(this.Partition);
            if (newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
            return newShape;
        }

        private DslDiagrams.NodeShape CreateShapeForTipoFormatoSalidaWeb(TipoFormatoSalidaWeb element)
        {
            FormatoDeSalidaShape newShape = new FormatoDeSalidaShape(this.Partition);
            if (newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
            return newShape;
        }

        private DslDiagrams.NodeShape CreateShapeForFuenteDeDatosPrimaria(FuenteDeDatosPrimaria element)
        {
            FuenteDeDatosShape newShape = new FuenteDeDatosShape(this.Partition);
            if (newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
            return newShape;
        }
        #endregion
        #region Decorator mapping
        /// <summary>
        /// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
        /// are defined per diagram type rather than per shape type.
        /// </summary>
        protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
        {
            base.InitializeShapeFields(shapeFields);
            global::VisorDatosDSL.FuenteDeDatosShape.DecoratorsInitialized += FuenteDeDatosShapeDecoratorMap.OnDecoratorsInitialized;
            global::VisorDatosDSL.FormatoDeSalidaShape.DecoratorsInitialized += FormatoDeSalidaShapeDecoratorMap.OnDecoratorsInitialized;
            global::VisorDatosDSL.TipoDeChartShape.DecoratorsInitialized += TipoDeChartShapeDecoratorMap.OnDecoratorsInitialized;
            global::VisorDatosDSL.WebServiceShape.DecoratorsInitialized += WebServiceShapeDecoratorMap.OnDecoratorsInitialized;
            global::VisorDatosDSL.BaseDatosShape.DecoratorsInitialized += BaseDatosShapeDecoratorMap.OnDecoratorsInitialized;
        }

        /// <summary>
        /// Class containing decorator path traversal methods for FuenteDeDatosShape.
        /// </summary>
        internal static partial class FuenteDeDatosShapeDecoratorMap
        {
            /// <summary>
            /// Event handler called when decorator initialization is complete for FuenteDeDatosShape.  Adds decorator mappings for this shape or connector.
            /// </summary>
            public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
            {
                DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
                DslDiagrams::AssociatedPropertyInfo propertyInfo;

                propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::VisorDatosDSL.FuenteDeDatosPrimaria.NombreDomainPropertyId);
                DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreDecorator").AssociateValueWith(shape.Store, propertyInfo);
            }
        }

        /// <summary>
        /// Class containing decorator path traversal methods for FormatoDeSalidaShape.
        /// </summary>
        internal static partial class FormatoDeSalidaShapeDecoratorMap
        {
            /// <summary>
            /// Event handler called when decorator initialization is complete for FormatoDeSalidaShape.  Adds decorator mappings for this shape or connector.
            /// </summary>
            public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
            {
                DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
                DslDiagrams::AssociatedPropertyInfo propertyInfo;

                propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::VisorDatosDSL.TipoFormatoSalidaWeb.NombreDomainPropertyId);
                DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreDecorator").AssociateValueWith(shape.Store, propertyInfo);
            }
        }

        /// <summary>
        /// Class containing decorator path traversal methods for TipoDeChartShape.
        /// </summary>
        internal static partial class TipoDeChartShapeDecoratorMap
        {
            /// <summary>
            /// Event handler called when decorator initialization is complete for TipoDeChartShape.  Adds decorator mappings for this shape or connector.
            /// </summary>
            public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
            {
                DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
                DslDiagrams::AssociatedPropertyInfo propertyInfo;

                propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::VisorDatosDSL.TipoDeChart.NombreDomainPropertyId);
                DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreDecorator").AssociateValueWith(shape.Store, propertyInfo);

                propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::VisorDatosDSL.TipoDeChart.NombreDomainPropertyId);
                DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreDecorator").AssociateValueWith(shape.Store, propertyInfo);
            }
        }

        /// <summary>
        /// Class containing decorator path traversal methods for WebServiceShape.
        /// </summary>
        internal static partial class WebServiceShapeDecoratorMap
        {
            /// <summary>
            /// Event handler called when decorator initialization is complete for WebServiceShape.  Adds decorator mappings for this shape or connector.
            /// </summary>
            public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
            {
                DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
                DslDiagrams::AssociatedPropertyInfo propertyInfo;

                propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::VisorDatosDSL.WebService.NombreDomainPropertyId);
                DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreDecorator").AssociateValueWith(shape.Store, propertyInfo);

                propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::VisorDatosDSL.WebService.NombreDomainPropertyId);
                DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreDecorator").AssociateValueWith(shape.Store, propertyInfo);
            }
        }

        /// <summary>
        /// Class containing decorator path traversal methods for BaseDatosShape.
        /// </summary>
        internal static partial class BaseDatosShapeDecoratorMap
        {
            /// <summary>
            /// Event handler called when decorator initialization is complete for BaseDatosShape.  Adds decorator mappings for this shape or connector.
            /// </summary>
            public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
            {
                DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
                DslDiagrams::AssociatedPropertyInfo propertyInfo;

                propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::VisorDatosDSL.BaseDatos.NombreDomainPropertyId);
                DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreDecorator").AssociateValueWith(shape.Store, propertyInfo);
            }
        }

        #endregion

        #region Connect actions
        private bool changingMouseAction;
        private global::VisorDatosDSL.ConectorFuente_FormatoSalidaConnectAction conectorFuente_FormatoSalidaConnectAction;
        private global::VisorDatosDSL.Conector_Fuente_TipoChartConnectAction conector_Fuente_TipoChartConnectAction;
        private global::VisorDatosDSL.Conector_Fuente_WebServiceConnectAction conector_Fuente_WebServiceConnectAction;
        private global::VisorDatosDSL.ConectorFuente_BaseDatosConnectAction conectorFuente_BaseDatosConnectAction;
        /// <summary>
        /// Virtual method to provide a filter when to select the mouse action
        /// </summary>
        /// <param name="activeView">Currently active view</param>
        /// <param name="filter">filter string used to filter the toolbox items</param>
        protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
        {
            return activeView.SelectedToolboxItemSupportsFilterString(filter);
        }
        /// <summary>
        /// Override to provide the right mouse action when trying
        /// to create links on the diagram
        /// </summary>
        /// <param name="pointArgs"></param>
        public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
        {
            if (pointArgs == null) throw new global::System.ArgumentNullException("pointArgs");

            DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
            if (activeView != null)
            {
                DslDiagrams::MouseAction action = null;
                if (SelectedToolboxItemSupportsFilterString(activeView, global::VisorDatosDSL.VisorDatosDSLToolboxHelper.ConectorFuente_FormatoSalidaFilterString))
                {
                    if (this.conectorFuente_FormatoSalidaConnectAction == null)
                    {
                        this.conectorFuente_FormatoSalidaConnectAction = new global::VisorDatosDSL.ConectorFuente_FormatoSalidaConnectAction(this);
                        this.conectorFuente_FormatoSalidaConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
                    }
                    action = this.conectorFuente_FormatoSalidaConnectAction;
                }
                else if (SelectedToolboxItemSupportsFilterString(activeView, global::VisorDatosDSL.VisorDatosDSLToolboxHelper.Conector_Fuente_TipoChartFilterString))
                {
                    if (this.conector_Fuente_TipoChartConnectAction == null)
                    {
                        this.conector_Fuente_TipoChartConnectAction = new global::VisorDatosDSL.Conector_Fuente_TipoChartConnectAction(this);
                        this.conector_Fuente_TipoChartConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
                    }
                    action = this.conector_Fuente_TipoChartConnectAction;
                }
                else if (SelectedToolboxItemSupportsFilterString(activeView, global::VisorDatosDSL.VisorDatosDSLToolboxHelper.Conector_Fuente_WebServiceFilterString))
                {
                    if (this.conector_Fuente_WebServiceConnectAction == null)
                    {
                        this.conector_Fuente_WebServiceConnectAction = new global::VisorDatosDSL.Conector_Fuente_WebServiceConnectAction(this);
                        this.conector_Fuente_WebServiceConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
                    }
                    action = this.conector_Fuente_WebServiceConnectAction;
                }
                else if (SelectedToolboxItemSupportsFilterString(activeView, global::VisorDatosDSL.VisorDatosDSLToolboxHelper.ConectorFuente_BaseDatosFilterString))
                {
                    if (this.conectorFuente_BaseDatosConnectAction == null)
                    {
                        this.conectorFuente_BaseDatosConnectAction = new global::VisorDatosDSL.ConectorFuente_BaseDatosConnectAction(this);
                        this.conectorFuente_BaseDatosConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
                    }
                    action = this.conectorFuente_BaseDatosConnectAction;
                }
                else
                {
                    action = null;
                }

                if (pointArgs.DiagramClientView.ActiveMouseAction != action)
                {
                    try
                    {
                        this.changingMouseAction = true;
                        pointArgs.DiagramClientView.ActiveMouseAction = action;
                    }
                    finally
                    {
                        this.changingMouseAction = false;
                    }
                }
            }
        }

        /// <summary>
        /// Snap toolbox selection back to regular pointer after using a custom connect action.
        /// </summary>
        private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
        {
            OnMouseActionDeactivated();
        }

        /// <summary>
        /// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
        /// after using a custom connect action.
        /// </summary>
        protected virtual void OnMouseActionDeactivated()
        {
            DslDiagrams::DiagramView activeView = this.ActiveDiagramView;

            if (activeView != null && activeView.Toolbox != null)
            {
                // If we're not changing mouse action due to changing toolbox selection change,
                // reset toolbox selection.
                if (!this.changingMouseAction)
                {
                    activeView.Toolbox.SelectedToolboxItemUsed();
                }
            }
        }
        #endregion

        /// <summary>
        /// Dispose of connect actions.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            try
            {
                if (disposing)
                {
                    if (this.conectorFuente_FormatoSalidaConnectAction != null)
                    {
                        this.conectorFuente_FormatoSalidaConnectAction.Dispose();
                        this.conectorFuente_FormatoSalidaConnectAction = null;
                    }
                    if (this.conector_Fuente_TipoChartConnectAction != null)
                    {
                        this.conector_Fuente_TipoChartConnectAction.Dispose();
                        this.conector_Fuente_TipoChartConnectAction = null;
                    }
                    if (this.conector_Fuente_WebServiceConnectAction != null)
                    {
                        this.conector_Fuente_WebServiceConnectAction.Dispose();
                        this.conector_Fuente_WebServiceConnectAction = null;
                    }
                    if (this.conectorFuente_BaseDatosConnectAction != null)
                    {
                        this.conectorFuente_BaseDatosConnectAction.Dispose();
                        this.conectorFuente_BaseDatosConnectAction = null;
                    }
                }
            }
            finally
            {
                base.Dispose(disposing);
            }
        }
        #region Constructors, domain class Id

        /// <summary>
        /// VisorDatosDSLDiagram domain class Id.
        /// </summary>
        public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa17461e7, 0x715e, 0x42c4, 0xa1, 0xcb, 0x0d, 0xce, 0x2c, 0xb7, 0xff, 0xcc);
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="store">Store where new element is to be created.</param>
        /// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        public VisorDatosDSLDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
            : this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
        {
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="partition">Partition where new element is to be created.</param>
        /// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        public VisorDatosDSLDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
            : base(partition, propertyAssignments)
        {
        }
        #endregion
    }
}
namespace VisorDatosDSL
{

    /// <summary>
    /// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
    /// This now enables the DSL author to everride the SkipFixUp() method 
    /// </summary>
    internal partial class FixUpDiagramBase : DslModeling::AddRule
    {
        protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
        {
            return childElement.IsDeleted;
        }
    }

    /// <summary>
    /// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
    /// </summary>
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.FuenteDeDatosPrimaria), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.TipoFormatoSalidaWeb), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.TipoDeChart), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.WebService), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.BaseDatos), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesFormatosDeSalida), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesTiposDeChart), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesWebService), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesBaseDatos), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled = true)]
    internal sealed partial class FixUpDiagram : FixUpDiagramBase
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
        {
            if (e == null) throw new global::System.ArgumentNullException("e");

            DslModeling::ModelElement childElement = e.ModelElement;
            if (this.SkipFixup(childElement))
                return;
            DslModeling::ModelElement parentElement;
            if (childElement is DslModeling::ElementLink)
            {
                parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
            }
            else
            if (childElement is global::VisorDatosDSL.FuenteDeDatosPrimaria)
            {
                // Method:
                // private Microsoft.VisualStudio.Modeling.ModelElement GetParentForFuenteDeDatosPrimaria(FuenteDeDatosPrimaria childElement)
                // {
                // }
                // must be implemented in a partial class of VisorDatosDSL.FixUpDiagram.  Given a child element,
                // this method should return the parent model element that is associated with the shape or diagram that will be the parent 
                // of the shape created for this child.  If no shape should be created, the method should return null.
                parentElement = GetParentForFuenteDeDatosPrimaria((global::VisorDatosDSL.FuenteDeDatosPrimaria)childElement);
            }
            else
            if (childElement is global::VisorDatosDSL.TipoFormatoSalidaWeb)
            {
                // Method:
                // private Microsoft.VisualStudio.Modeling.ModelElement GetParentForTipoFormatoSalidaWeb(TipoFormatoSalidaWeb childElement)
                // {
                // }
                // must be implemented in a partial class of VisorDatosDSL.FixUpDiagram.  Given a child element,
                // this method should return the parent model element that is associated with the shape or diagram that will be the parent 
                // of the shape created for this child.  If no shape should be created, the method should return null.
                parentElement = GetParentForTipoFormatoSalidaWeb((global::VisorDatosDSL.TipoFormatoSalidaWeb)childElement);
            }
            else
            if (childElement is global::VisorDatosDSL.TipoDeChart)
            {
                parentElement = GetParentForTipoDeChart((global::VisorDatosDSL.TipoDeChart)childElement);
            }
            else
            if (childElement is global::VisorDatosDSL.WebService)
            {
                // Method:
                // private Microsoft.VisualStudio.Modeling.ModelElement GetParentForWebService(WebService childElement)
                // {
                // }
                // must be implemented in a partial class of VisorDatosDSL.FixUpDiagram.  Given a child element,
                // this method should return the parent model element that is associated with the shape or diagram that will be the parent 
                // of the shape created for this child.  If no shape should be created, the method should return null.
                parentElement = GetParentForWebService((global::VisorDatosDSL.WebService)childElement);
            }
            else
            if (childElement is global::VisorDatosDSL.BaseDatos)
            {
                // Method:
                // private Microsoft.VisualStudio.Modeling.ModelElement GetParentForBaseDatos(BaseDatos childElement)
                // {
                // }
                // must be implemented in a partial class of VisorDatosDSL.FixUpDiagram.  Given a child element,
                // this method should return the parent model element that is associated with the shape or diagram that will be the parent 
                // of the shape created for this child.  If no shape should be created, the method should return null.
                parentElement = GetParentForBaseDatos((global::VisorDatosDSL.BaseDatos)childElement);
            }
            else
            {
                parentElement = null;
            }

            if (parentElement != null)
            {
                DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
            }
        }

        private DslModeling.ModelElement GetParentForBaseDatos(BaseDatos childElement)
        {
            global::VisorDatosDSL.FuentesDeDatosModel result = childElement.FuentesDeDatosModel;
            if (result == null) return null;
            return result;
        }

        private DslModeling.ModelElement GetParentForTipoFormatoSalidaWeb(TipoFormatoSalidaWeb childElement)
        {
            global::VisorDatosDSL.FuentesDeDatosModel result = childElement.FuentesDeDatosModel;
            if (result == null) return null;
            return result;
        }

        private DslModeling.ModelElement GetParentForFuenteDeDatosPrimaria(FuenteDeDatosPrimaria childElement)
        {
            global::VisorDatosDSL.FuentesDeDatosModel result = childElement.FuentesDeDatosModel;
            if (result == null) return null;
            return result;
        }

        public static global::VisorDatosDSL.FuentesDeDatosModel GetParentForWebService(global::VisorDatosDSL.WebService root)
        {
            // Segments 0 and 1
            global::VisorDatosDSL.FuentesDeDatosModel result = root.FuentesDeDatosModel;
            if (result == null) return null;
            return result;
        }

        public static global::VisorDatosDSL.FuentesDeDatosModel GetParentForTipoDeChart(global::VisorDatosDSL.TipoDeChart root)
        {
            // Segments 0 and 1
            global::VisorDatosDSL.FuentesDeDatosModel result = root.FuentesDeDatosModel;
            if (result == null) return null;
            return result;
        }
        private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
        {
            global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;

            if (linkedElements.Count == 2)
            {
                DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
                DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;

                if (sourceShape == null)
                {
                    DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
                    foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
                    {
                        DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
                        if (shape != null)
                        {
                            sourceShape = shape;
                            break;
                        }
                    }
                }

                if (targetShape == null)
                {
                    DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
                    foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
                    {
                        DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
                        if (shape != null)
                        {
                            targetShape = shape;
                            break;
                        }
                    }
                }

                if (sourceShape == null || targetShape == null)
                {
                    global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
                    return null;
                }

                DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
                DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;

                while (sourceParent != targetParent && sourceParent != null)
                {
                    DslDiagrams::ShapeElement curParent = targetParent;
                    while (sourceParent != curParent && curParent != null)
                    {
                        curParent = curParent.ParentShape;
                    }

                    if (sourceParent == curParent)
                    {
                        break;
                    }
                    else
                    {
                        sourceParent = sourceParent.ParentShape;
                    }
                }

                while (sourceParent != null)
                {
                    // ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
                    if (sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
                    {
                        break;
                    }
                    else
                    {
                        sourceParent = sourceParent.ParentShape;
                    }
                }

                global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
                return sourceParent.ModelElement;
            }

            return null;
        }
    }


    /// <summary>
    /// Reroute a connector when the role players of its underlying relationship change
    /// </summary>
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesFormatosDeSalida), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesTiposDeChart), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesWebService), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled = true)]
    [DslModeling::RuleOn(typeof(global::VisorDatosDSL.FuenteDeDatosPrimariaReferencesBaseDatos), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled = true)]
    internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
    {
        /// <summary>
        /// Reroute a connector when the role players of its underlying relationship change
        /// </summary>
        public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
        {
            if (e == null) throw new global::System.ArgumentNullException("e");

            global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
            foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
            {
                // Fix up any binary link shapes attached to the element link.
                DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
                if (linkShape != null)
                {
                    global::VisorDatosDSL.VisorDatosDSLDiagram diagram = linkShape.Diagram as global::VisorDatosDSL.VisorDatosDSLDiagram;
                    if (diagram != null)
                    {
                        if (e.NewRolePlayer != null)
                        {
                            DslDiagrams::NodeShape fromShape;
                            DslDiagrams::NodeShape toShape;
                            diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
                            if (fromShape != null && toShape != null)
                            {
                                if (!object.Equals(fromShape, linkShape.FromShape))
                                {
                                    linkShape.FromShape = fromShape;
                                }
                                if (!object.Equals(linkShape.ToShape, toShape))
                                {
                                    linkShape.ToShape = toShape;
                                }
                            }
                            else
                            {
                                // delete the connector if we cannot find an appropriate target shape.
                                linkShape.Delete();
                            }
                        }
                        else
                        {
                            // delete the connector if the new role player is null.
                            linkShape.Delete();
                        }
                    }
                }
            }
        }
    }
}
